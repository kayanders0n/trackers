ALTER TABLE ACTIVITY ADD STATUSID INTEGER;
ALTER TABLE ACTIVITY ALTER COLUMN STATUSID POSITION 4;
ALTER TABLE ACTIVITY ADD DNF SMALLINT;
ALTER TABLE ACTIVITY ALTER COLUMN DNF POSITION 8;
ALTER TABLE ACTIVITY ADD DNFON TIMESTAMP;
ALTER TABLE ACTIVITY ALTER COLUMN DNFON POSITION 9;
ALTER TABLE ACTIVITY ADD REVIEWED SMALLINT;
ALTER TABLE ACTIVITY ALTER COLUMN REVIEWED POSITION 10;
ALTER TABLE ACTIVITY ADD REVIEWEDON TIMESTAMP;
ALTER TABLE ACTIVITY ALTER COLUMN REVIEWEDON POSITION 11;
ALTER TABLE ACTIVITY ADD RATING DOUBLE PRECISION;
ALTER TABLE ACTIVITY ALTER COLUMN RATING POSITION 12;
ALTER TABLE ACTIVITY ADD REVIEWTEXT VARCHAR(2000);
ALTER TABLE ACTIVITY ALTER COLUMN REVIEWTEXT POSITION 13;
ALTER TABLE ACTIVITY ADD HIDEREVIEW SMALLINT;
ALTER TABLE ACTIVITY ALTER COLUMN HIDEREVIEW POSITION 14;

CREATE INDEX ACTIVITY_USER ON ACTIVITY (USERID);
CREATE INDEX ACTIVITY_USER_STATUS ON ACTIVITY (USERID, STATUSID);

ALTER TABLE DAILYLOG ADD ACTIVITYID INTEGER;
ALTER TABLE DAILYLOG ALTER COLUMN ACTIVITYID POSITION 3;
ALTER TABLE DAILYLOG ADD NOTES VARCHAR(6144);
ALTER TABLE DAILYLOG ALTER COLUMN NOTES POSITION 7;

ALTER TABLE DAILYLOG ADD UNIQUE (ACTIVITYID, ACTIVITYDATE);

CREATE INDEX DAILYLOG_ACTIVITY ON DAILYLOG(ACTIVITYID);

CREATE EXCEPTION NO_OP 'No operation.';
CREATE EXCEPTION ACTIVITY_DUP 'Already have a Planned/In-Progress activity for this title.';

SET TERM !! ;

CREATE OR ALTER TRIGGER ACTIVITY_INSERT FOR ACTIVITY
ACTIVE BEFORE INSERT POSITION 0
AS
  DECLARE VARIABLE EXIST_ID INTEGER;
  DECLARE VARIABLE EXIST_STATUS SMALLINT;
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.STATUSID IS NULL OR NEW.STATUSID NOT BETWEEN 1 AND 4) THEN EXCEPTION FIELD_REQUIRED 'Valid StatusId (1-4) is required.';

  -- Only check for statuses 1/2. 3/4 are always allowed.
  IF (NEW.STATUSID IN (1,2)) THEN BEGIN
    /* Lock any existing 1/2 row for this (USERID, TITLEID) to avoid concurrent updates. */
    SELECT FIRST 1 ID, STATUSID
    FROM ACTIVITY
    WHERE USERID  = :NEW.USERID
      AND TITLEID = :NEW.TITLEID
      AND STATUSID IN (1,2)
    FOR UPDATE WITH LOCK
    INTO :EXIST_ID, :EXIST_STATUS;

    IF (EXIST_ID IS NOT NULL) THEN BEGIN
      IF (NEW.STATUSID = 2) THEN BEGIN
        /* Flip to In-Progress */
        /* Preserve an existing STARTDATE, 
            Else use NEW.STARTDATE if the UI provided it, 
            Else default to CURRENT_DATE 
        */
        UPDATE ACTIVITY
          SET STATUSID   = 2,
              STARTDATE  = COALESCE(STARTDATE, :NEW.STARTDATE, CURRENT_DATE),
              MODIFIEDON = CURRENT_TIMESTAMP
        WHERE ID = :EXIST_ID
          AND (STATUSID <> 2 OR STARTDATE IS NULL);
      END ELSE BEGIN
        /* Flip to Planned */
        UPDATE ACTIVITY
          SET STATUSID   = 1,
              MODIFIEDON = CURRENT_TIMESTAMP
        WHERE ID = :EXIST_ID
          AND STATUSID <> 1;
      END

      -- Cancel the new insert (we already converted the existing row).
      EXCEPTION NO_OP 'Existing activity updated; no new row inserted.';
    END
  END

  /* PLANNED */
  IF (NEW.STATUSID = 1) THEN BEGIN
    NEW.STARTDATE  = NULL;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* IN-PROGRESS */
  ELSE IF (NEW.STATUSID = 2) THEN BEGIN
    IF (NEW.STARTDATE IS NULL) THEN NEW.STARTDATE = CURRENT_DATE;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* COMPLETED */
  ELSE IF (NEW.STATUSID = 3) THEN BEGIN
    NEW.COMPLETED  = 1;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
    IF (NEW.FINISHDATE IS NOT NULL AND NEW.STARTDATE IS NULL) THEN
      NEW.STARTDATE = NEW.FINISHDATE;
  END
  /* DID NOT FINISH */
  ELSE IF (NEW.STATUSID = 4) THEN BEGIN
    NEW.COMPLETED  = 0;
    NEW.DNF        = 1;
    IF (NEW.DNFON IS NULL) THEN NEW.DNFON = CURRENT_TIMESTAMP;
  END

  IF (NEW.REVIEWED = 1) THEN BEGIN
    IF (NEW.REVIEWEDON IS NULL) THEN NEW.REVIEWEDON = CURRENT_TIMESTAMP;
    IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
    IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
    /* RATING: leave as provided (NULL allowed) */
  END
  ELSE BEGIN
    NEW.REVIEWED   = 0;
    NEW.REVIEWEDON = NULL;
    NEW.RATING     = NULL;
    NEW.REVIEWTEXT = '';
    NEW.HIDEREVIEW = 0;
  END

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_ACTIVITY_ID, 1);
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER ACTIVITY_UPDATE FOR ACTIVITY
ACTIVE BEFORE UPDATE POSITION 0
AS
  DECLARE VARIABLE OTHER_ID INTEGER;
BEGIN
  -- immutables
  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.TITLEID IS DISTINCT FROM OLD.TITLEID) THEN EXCEPTION GOT_HERE 'Cannot change Title.';
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';
  IF (NEW.STATUSID IS NULL OR NEW.STATUSID NOT BETWEEN 1 AND 4) THEN EXCEPTION FIELD_REQUIRED 'Valid StatusId (1-4) is required.';

  IF (NEW.STATUSID IN (1,2)) THEN BEGIN
    -- If updating THIS row into 1/2, ensure no other 1/2 exists.
    SELECT FIRST 1 ID
      FROM ACTIVITY
     WHERE USERID  = :NEW.USERID
       AND TITLEID = :NEW.TITLEID
       AND STATUSID IN (1,2)
       AND ID <> :OLD.ID
     FOR UPDATE WITH LOCK
     INTO :OTHER_ID;

    IF (OTHER_ID IS NOT NULL) THEN EXCEPTION ACTIVITY_DUP;
  END

  /* PLANNED */
  IF (NEW.STATUSID = 1) THEN BEGIN
    NEW.STARTDATE  = NULL;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* IN-PROGRESS */
  ELSE IF (NEW.STATUSID = 2) THEN BEGIN
    NEW.STARTDATE  = COALESCE(NEW.STARTDATE, OLD.STARTDATE, CURRENT_DATE);
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* COMPLETED */
  ELSE IF (NEW.STATUSID = 3) THEN BEGIN
    NEW.COMPLETED  = 1;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
    IF (NEW.FINISHDATE IS NOT NULL AND NEW.STARTDATE IS NULL) THEN
      NEW.STARTDATE = NEW.FINISHDATE;
  END
  /* DID NOT FINISH */
  ELSE IF (NEW.STATUSID = 4) THEN BEGIN
    NEW.COMPLETED  = 0;
    NEW.DNF        = 1;
    IF (NEW.DNFON IS NULL) THEN NEW.DNFON = CURRENT_TIMESTAMP;
  END

  /* Review fields */
  IF (NEW.REVIEWED = 1) THEN BEGIN
    IF (NEW.REVIEWEDON IS NULL) THEN NEW.REVIEWEDON = CURRENT_TIMESTAMP;
    IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
    IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
    -- rating: leave as provided (NULL or 0â€“5)
  END
  ELSE BEGIN
    NEW.REVIEWED   = 0;
    NEW.REVIEWEDON = NULL;
    NEW.RATING     = NULL;
    NEW.REVIEWTEXT = '';
    NEW.HIDEREVIEW = 0;
  END

  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!! 

CREATE OR ALTER TRIGGER DAILYLOG_INSERT FOR DAILYLOG
ACTIVE BEFORE INSERT POSITION 0
AS
  DECLARE VARIABLE ACTIVITY_USERID INTEGER;
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.ACTIVITYID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'ActivityId is required.';
  IF (NEW.ACTIVITYDATE IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Activity Date is required.';

  /* Activity must exist and belong to this user */
  SELECT USERID FROM ACTIVITY WHERE ID = :NEW.ACTIVITYID INTO :ACTIVITY_USERID;
  IF (ACTIVITY_USERID IS NULL) THEN EXCEPTION GOT_HERE 'Activity not found.';
  IF (ACTIVITY_USERID <> NEW.USERID) THEN EXCEPTION GOT_HERE 'Log user does not match Activity user.';

  /* Progress rules */
  IF (NEW.PROGRESS IS NULL) THEN NEW.PROGRESS = 0;
  IF (NEW.PROGRESS < 0) THEN EXCEPTION GOT_HERE 'Progress cannot be negative.';
  IF (NEW.PROGRESS > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required when Progress > 0.';

  /* Defaults */
  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_DAILYLOG_ID,1);
  IF (NEW.NOTES IS NULL OR TRIM(NEW.NOTES) = '') THEN NEW.NOTES = '';
END
!! 

CREATE OR ALTER TRIGGER DAILYLOG_UPDATE FOR DAILYLOG
ACTIVE BEFORE UPDATE POSITION 0
AS
  DECLARE VARIABLE ACTIVITY_USERID INTEGER;
BEGIN
  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.ACTIVITYID IS DISTINCT FROM OLD.ACTIVITYID) THEN EXCEPTION GOT_HERE 'Cannot change Activity.';
  IF (NEW.ACTIVITYDATE IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Activity Date is required.';

  /* Activity must exist and belong to this user */
  SELECT USERID FROM ACTIVITY WHERE ID = :NEW.ACTIVITYID INTO :ACTIVITY_USERID;
  IF (ACTIVITY_USERID IS NULL) THEN EXCEPTION GOT_HERE 'Activity not found.';
  IF (ACTIVITY_USERID <> NEW.USERID) THEN EXCEPTION GOT_HERE 'Log user does not match Activity user.';

  /* Progress rules */
  IF (NEW.PROGRESS IS NULL) THEN NEW.PROGRESS = 0;
  IF (NEW.PROGRESS < 0) THEN EXCEPTION GOT_HERE 'Progress cannot be negative.';
  IF (NEW.PROGRESS > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required when Progress > 0.';

  /* Defaults */
  IF (NEW.NOTES IS NULL OR TRIM(NEW.NOTES) = '') THEN NEW.NOTES = '';
END
!! 

CREATE OR ALTER TRIGGER TITLE_DELETE FOR TITLE
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (EXISTS(SELECT FIRST 1 ID FROM ACTIVITY       WHERE TITLEID = OLD.ID)) THEN EXCEPTION DATA_LINKED;
  IF (EXISTS(SELECT FIRST 1 ID FROM USERLISTITEMS  WHERE TITLEID = OLD.ID)) THEN EXCEPTION DATA_LINKED;
END
!!

CREATE OR ALTER TRIGGER USERS_DELETE FOR USERS
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  DELETE FROM USERLIST    WHERE USERID = OLD.ID;  /* DELETES BOTH THE LIST AND LIST ITEMS */
  DELETE FROM ACTIVITY    WHERE USERID = OLD.ID;
  DELETE FROM DAILYLOG    WHERE USERID = OLD.ID;
END
!!

CREATE OR ALTER TRIGGER USERS_INSERT FOR USERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.FIRSTNAME IS NULL OR TRIM(NEW.FIRSTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'First Name is required.';
  IF (NEW.LASTNAME IS NULL OR TRIM(NEW.LASTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Last Name is required.';
  IF (NEW.USERNAME IS NULL OR TRIM(NEW.USERNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Username is required.';
  IF (NEW.PASSWORD_HASH IS NULL OR TRIM(NEW.PASSWORD_HASH) = '') THEN EXCEPTION FIELD_REQUIRED 'Password is required.';
  
  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERS_ID,1);
  IF (NEW.EMAIL IS NULL OR TRIM(NEW.EMAIL) = '') THEN NEW.EMAIL = '';
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER USERLIST_DELETE FOR USERLIST
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  DELETE FROM USERLISTITEMS WHERE USERLISTID = OLD.ID;
END
!!

CREATE OR ALTER TRIGGER USERLIST_INSERT FOR USERLIST
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';  

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERLIST_ID,1);
  IF (NEW.LONGDESCRIPT IS NULL OR TRIM(NEW.LONGDESCRIPT) = '') THEN NEW.LONGDESCRIPT = '';
  IF (NEW.ISPRIVATE IS NULL) THEN NEW.ISPRIVATE = 0;
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER USERLIST_UPDATE FOR USERLIST
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.TYPEID IS DISTINCT FROM OLD.TYPEID) THEN EXCEPTION GOT_HERE 'Cannot change Media Type.';
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';
  
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';

  IF (NEW.LONGDESCRIPT IS NULL OR TRIM(NEW.LONGDESCRIPT) = '') THEN NEW.LONGDESCRIPT = '';
  IF (NEW.ISPRIVATE IS NULL) THEN NEW.ISPRIVATE = 0;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

SET TERM ; !!

DROP TRIGGER LISTTYPE_INSERT;
DROP TRIGGER USERRATINGS_INSERT;
DROP TRIGGER USERRATINGS_UPDATE;
DROP GENERATOR GEN_LISTTYPE_ID;
DROP GENERATOR GEN_USERRATINGS_ID;
DROP TABLE LISTTYPE;
DROP TABLE USERRATINGS;
ALTER TABLE ACTIVITY DROP NOTES;
ALTER TABLE DAILYLOG DROP TITLEID;
ALTER TABLE DAILYLOG DROP COMMENT;
ALTER TABLE USERLIST DROP LISTTYPEID;

ALTER TABLE USERLISTITEMS ADD UNIQUE (USERLISTID, TITLEID);

CREATE TABLE STATUSCODES (
  ID INTEGER NOT NULL,
  DESCRIPT VARCHAR(80)
);

ALTER TABLE STATUSCODES ADD PRIMARY KEY (ID);

INSERT INTO STATUSCODES (ID, DESCRIPT) VALUES (1, 'Planned');
INSERT INTO STATUSCODES (ID, DESCRIPT) VALUES (2, 'In Progress');
INSERT INTO STATUSCODES (ID, DESCRIPT) VALUES (3, 'Completed');
INSERT INTO STATUSCODES (ID, DESCRIPT) VALUES (4, 'Did Not Finish');

ALTER TABLE ENTITY ALTER COLUMN DESCRIPT TYPE VARCHAR(80); 
ALTER TABLE GENRE ALTER COLUMN DESCRIPT TYPE VARCHAR(80); 
ALTER TABLE SERIES ALTER COLUMN DESCRIPT TYPE VARCHAR(80); 
ALTER TABLE TITLE ALTER COLUMN DESCRIPT TYPE VARCHAR(80); 
ALTER TABLE TYPECODES ALTER COLUMN DESCRIPT TYPE VARCHAR(80); 
ALTER TABLE UOM ALTER COLUMN DESCRIPT TYPE VARCHAR(80); 
ALTER TABLE USERLIST ALTER COLUMN DESCRIPT TYPE VARCHAR(80); 
ALTER TABLE PEOPLE ALTER COLUMN FIRSTNAME TYPE VARCHAR(50); 
ALTER TABLE PEOPLE ALTER COLUMN LASTNAME TYPE VARCHAR(50); 
ALTER TABLE USERLIST ALTER COLUMN LONGDESCRIPT TYPE VARCHAR(255);
ALTER TABLE USERS ALTER COLUMN EMAIL TYPE VARCHAR(254);