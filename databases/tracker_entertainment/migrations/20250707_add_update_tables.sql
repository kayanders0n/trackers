CREATE GENERATOR GEN_USERS_ID     START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_LISTTYPE_ID  START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_LIST_ID      START WITH 100 INCREMENT BY 1;
CREATE GENERATOR GEN_LISTITEMS_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_ACTIVITY_ID  START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_DAILYLOG_ID  START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_USER_RATING_ID  START WITH 1 INCREMENT BY 1;

CREATE TABLE USERS (
    ID             INTEGER NOT NULL,
    FIRSTNAME      VARCHAR(50) NOT NULL,
    LASTNAME       VARCHAR(50) NOT NULL,
    USERNAME       VARCHAR(50) NOT NULL,
    PASSWORD_HASH  VARCHAR(255) NOT NULL,
    EMAIL          VARCHAR(100),
    CREATEDON      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFIEDON     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE LISTTYPE (
    ID             INTEGER NOT NULL,
    DESCRIPT       VARCHAR(25) NOT NULL,
    TYPEID         INTEGER NOT NULL
);

CREATE TABLE LIST (
    ID             INTEGER NOT NULL,
    USERID         INTEGER NOT NULL,
    DESCRIPT       VARCHAR(25) NOT NULL,
    LONGDESCRIPT   VARCHAR(50),
    TYPEID         INTEGER NOT NULL,
    ISPRIVATE      INTEGER DEFAULT 0,
    LISTTYPEID     INTEGER DEFAULT 0,
    CREATEDON      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFIEDON     TIMESTAMP DEFAULT CURRENT_TIMESTAMP   
);

CREATE TABLE LISTITEMS (
    ID             INTEGER NOT NULL,
    LISTID         INTEGER NOT NULL,
    TITLEID        INTEGER NOT NULL,
    CREATEDON      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SORTORDER      INTEGER
);

CREATE TABLE ACTIVITY (
    ID             INTEGER NOT NULL,
    USERID         INTEGER NOT NULL,
    TITLEID        INTEGER NOT NULL,
    STARTDATE      DATE,
    FINISHDATE     DATE,
    COMPLETED      INTEGER DEFAULT 0,
    NOTES          VARCHAR(500),
    CREATEDON      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFIEDON     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE DAILYLOG (
    ID             INTEGER NOT NULL,
    USERID         INTEGER NOT NULL,
    TITLEID        INTEGER NOT NULL,
    ACTIVITYDATE   DATE NOT NULL,
    PROGRESS       INTEGER,
    UOMID          INTEGER,
    COMMENT        VARCHAR(300)
);

CREATE TABLE USER_RATING (
  ID         INTEGER NOT NULL,
  USERID     INTEGER NOT NULL,
  TITLEID    INTEGER NOT NULL,
  RATING     DOUBLE,
  REVIEW     VARCHAR(2000),
  HIDE       INTEGER NOT NULL DEFAULT 0,
  CREATEDON  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  MODIFIEDON TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE USERS     ADD UNIQUE (USERNAME);

ALTER TABLE USERS     ADD PRIMARY KEY (ID);
ALTER TABLE LISTTYPE  ADD PRIMARY KEY (ID);
ALTER TABLE LIST      ADD PRIMARY KEY (ID);
ALTER TABLE LISTITEMS ADD PRIMARY KEY (ID);
ALTER TABLE ACTIVITY  ADD PRIMARY KEY (ID);
ALTER TABLE DAILYLOG  ADD PRIMARY KEY (ID);
ALTER TABLE USER_RATING  ADD PRIMARY KEY (ID);

SET TERM ^ ;

/* Trigger: USERS_INSERT */
CREATE OR ALTER TRIGGER USERS_INSERT FOR USERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.FIRSTNAME IS NULL OR TRIM(NEW.FIRSTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'First Name is required.';
  IF (NEW.LASTNAME IS NULL OR TRIM(NEW.LASTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Last Name is required.';
  IF (NEW.USERNAME IS NULL OR TRIM(NEW.USERNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Username is required.';
  IF (NEW.PASSWORD_HASH IS NULL OR TRIM(NEW.PASSWORD_HASH) = '') THEN EXCEPTION FIELD_REQUIRED 'Password is required.';
  
  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERS_ID,1);
  IF (NEW.EMAIL IS NULL OR TRIM(NEW.EMAIL) = '') THEN NEW.EMAIL = '';
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: LISTTYPE_INSERT */
CREATE OR ALTER TRIGGER LISTTYPE_INSERT FOR LISTTYPE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'List Type is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_LISTTYPE_ID,1);
END
^

/* Trigger: LIST_INSERT */
CREATE OR ALTER TRIGGER LIST_INSERT FOR LIST
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';  
  IF (NEW.LISTTYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'ListTypeId is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_LIST_ID,1);
  IF (NEW.LONGDESCRIPT IS NULL OR TRIM(NEW.LONGDESCRIPT) = '') THEN NEW.LONGDESCRIPT = '';
  IF (NEW.ISPRIVATE IS NULL) THEN NEW.ISPRIVATE = 0;
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: LISTITEMS_INSERT */
CREATE OR ALTER TRIGGER LISTITEMS_INSERT FOR LISTITEMS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.LISTID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'ListId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_LISTITEMS_ID,1);
  IF (NEW.SORTORDER IS NULL) THEN NEW.SORTORDER = 0;
  NEW.CREATEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: ACTIVITY_INSERT */
CREATE OR ALTER TRIGGER ACTIVITY_INSERT FOR ACTIVITY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.STARTDATE IS NULL AND NEW.FINISHDATE IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Start or Finish Date is required.';

  IF (NEW.FINISHDATE IS NULL) THEN
    NEW.COMPLETED = 0;
  ELSE BEGIN
    NEW.COMPLETED = 1;
    IF (NEW.STARTDATE IS NULL) THEN NEW.STARTDATE = NEW.FINISHDATE;
  END

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_ACTIVITY_ID,1);
  IF (NEW.NOTES IS NULL OR TRIM(NEW.NOTES) = '') THEN NEW.NOTES = '';
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: DAILYLOG_INSERT */
CREATE OR ALTER TRIGGER DAILYLOG_INSERT FOR DAILYLOG
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.ACTIVITYDATE IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Activity Date is required.';
  IF (NEW.PROGRESS > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_DAILYLOG_ID,1);
  IF (NEW.COMMENT IS NULL OR TRIM(NEW.COMMENT) = '') THEN NEW.COMMENT = '';
END
^

CREATE OR ALTER TRIGGER USER_RATING_INSERT FOR USER_RATING
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.RATING IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Rating is required.';
  IF (NEW.RATING < 0 OR NEW.RATING > 5) THEN EXCEPTION GOT_HERE 'Rating must be 0 to 5.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USER_RATING_ID,1);
  IF (NEW.REVIEW IS NULL OR TRIM(NEW.REVIEW) = '') THEN NEW.REVIEW = '';
  IF (NEW.HIDE IS NULL) THEN NEW.HIDE = 0;
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* UPDATES TO PAST TRIGGERS */
CREATE OR ALTER TRIGGER ENTITY_INSERT FOR ENTITY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Entity Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Entity Type is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_ENTITY_ID,1);
END
^

CREATE OR ALTER TRIGGER GENRE_INSERT FOR GENRE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Genre Name is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_GENRE_ID,1);
  IF (NEW.ISENTERTAINMENT IS NULL) THEN NEW.ISENTERTAINMENT = 0;
  IF (NEW.ISBOOK IS NULL) THEN NEW.ISBOOK = 0;
END
^

CREATE OR ALTER TRIGGER SERIES_INSERT FOR SERIES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Series Name is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_SERIES_ID,1);
END
^

CREATE OR ALTER TRIGGER TITLE_INSERT FOR TITLE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Title is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';
  IF (NEW.CONTENT_SIZE > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_TITLE_ID,1);
  IF (NEW.CONTENT_SIZE IS NULL) THEN NEW.CONTENT_SIZE = 0;
  IF (NEW.IMAGEFILE IS NULL) THEN NEW.IMAGEFILE = '';
END
^

SET TERM ; ^