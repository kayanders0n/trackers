CREATE GENERATOR GEN_USERLIST_ID      START WITH 100 INCREMENT BY 1;
CREATE GENERATOR GEN_USERLISTITEMS_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_USERRATINGS_ID  START WITH 1 INCREMENT BY 1;

CREATE TABLE USERLIST (
    ID             INTEGER NOT NULL,
    USERID         INTEGER NOT NULL,
    DESCRIPT       VARCHAR(25) NOT NULL,
    LONGDESCRIPT   VARCHAR(50),
    TYPEID         INTEGER NOT NULL,
    ISPRIVATE      INTEGER DEFAULT 0,
    LISTTYPEID     INTEGER DEFAULT 0,
    CREATEDON      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFIEDON     TIMESTAMP DEFAULT CURRENT_TIMESTAMP   
);

CREATE TABLE USERLISTITEMS (
    ID             INTEGER NOT NULL,
    USERLISTID         INTEGER NOT NULL,
    TITLEID        INTEGER NOT NULL,
    CREATEDON      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SORTORDER      INTEGER
);

CREATE TABLE USERRATINGS (
  ID         INTEGER NOT NULL,
  USERID     INTEGER NOT NULL,
  TITLEID    INTEGER NOT NULL,
  RATING     DOUBLE PRECISION,
  REVIEW     VARCHAR(2000),
  HIDE       INTEGER DEFAULT 0,
  CREATEDON  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  MODIFIEDON TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE USERLIST      ADD PRIMARY KEY (ID);
ALTER TABLE USERLISTITEMS ADD PRIMARY KEY (ID);
ALTER TABLE USERRATINGS  ADD PRIMARY KEY (ID);

SET TERM ^ ;

/* Trigger: USERLIST_INSERT */
CREATE OR ALTER TRIGGER USERLIST_INSERT FOR USERLIST
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';  
  IF (NEW.LISTTYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'ListTypeId is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERLIST_ID,1);
  IF (NEW.LONGDESCRIPT IS NULL OR TRIM(NEW.LONGDESCRIPT) = '') THEN NEW.LONGDESCRIPT = '';
  IF (NEW.ISPRIVATE IS NULL) THEN NEW.ISPRIVATE = 0;
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: USERLISTITEMS_INSERT */
CREATE OR ALTER TRIGGER USERLISTITEMS_INSERT FOR USERLISTITEMS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERLISTID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserListId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERLISTITEMS_ID,1);
  IF (NEW.SORTORDER IS NULL) THEN NEW.SORTORDER = 0;
  NEW.CREATEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: USERRATINGS_INSERT */
CREATE OR ALTER TRIGGER USERRATINGS_INSERT FOR USERRATINGS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.RATING IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Rating is required.';
  IF (NEW.RATING < 0 OR NEW.RATING > 5) THEN EXCEPTION GOT_HERE 'Rating must be 0 to 5.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERRATINGS_ID,1);
  IF (NEW.REVIEW IS NULL OR TRIM(NEW.REVIEW) = '') THEN NEW.REVIEW = '';
  IF (NEW.HIDE IS NULL) THEN NEW.HIDE = 0;
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* UPDATE USERS_INSERT TRIGGER TO AUTOMATICALLY CREATE DEFAULT LISTS */
CREATE OR ALTER TRIGGER USERS_INSERT FOR USERS
ACTIVE BEFORE INSERT POSITION 0
AS
  DECLARE VARIABLE LISTTYPEID INTEGER;
  DECLARE VARIABLE LISTTYPEDESCRIPT VARCHAR(25);
  DECLARE VARIABLE TYPECODEID INTEGER;
BEGIN
  IF (NEW.FIRSTNAME IS NULL OR TRIM(NEW.FIRSTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'First Name is required.';
  IF (NEW.LASTNAME IS NULL OR TRIM(NEW.LASTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Last Name is required.';
  IF (NEW.USERNAME IS NULL OR TRIM(NEW.USERNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Username is required.';
  IF (NEW.PASSWORD_HASH IS NULL OR TRIM(NEW.PASSWORD_HASH) = '') THEN EXCEPTION FIELD_REQUIRED 'Password is required.';
  
  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERS_ID,1);
  IF (NEW.EMAIL IS NULL OR TRIM(NEW.EMAIL) = '') THEN NEW.EMAIL = '';
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;

  FOR SELECT ID, DESCRIPT, TYPEID FROM LISTTYPE WHERE ID > 1 INTO :LISTTYPEID, :LISTTYPEDESCRIPT, :TYPECODEID DO BEGIN
    INSERT INTO USERLIST (USERID, DESCRIPT, TYPEID, LISTTYPEID)
    VALUES (NEW.ID, :LISTTYPEDESCRIPT, :TYPECODEID, :LISTTYPEID);
  END
END
^

/* CREATE USERLIST UPDATE TRIGGER SO USERS CANNOT CHANGE DEFAULT LIST DATA */
CREATE OR ALTER TRIGGER USERLIST_UPDATE FOR USERLIST
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.TYPEID IS DISTINCT FROM OLD.TYPEID) THEN EXCEPTION GOT_HERE 'Cannot change Media Type.';
  IF (NEW.LISTTYPEID IS DISTINCT FROM OLD.LISTTYPEID) THEN EXCEPTION GOT_HERE 'Cannot change List Type.';
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';

  IF (OLD.LISTTYPEID > 1) THEN BEGIN
    IF (NEW.DESCRIPT IS DISTINCT FROM OLD.DESCRIPT) THEN EXCEPTION GOT_HERE 'Cannot change List Name.';
    IF (NEW.LONGDESCRIPT IS DISTINCT FROM OLD.LONGDESCRIPT) THEN EXCEPTION GOT_HERE 'Cannot change List Description.';
  END
  
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';

  IF (NEW.LONGDESCRIPT IS NULL OR TRIM(NEW.LONGDESCRIPT) = '') THEN NEW.LONGDESCRIPT = '';
  IF (NEW.ISPRIVATE IS NULL) THEN NEW.ISPRIVATE = 0;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* CREATE USERLIST DELETE TRIGGER SO IT DELETES THE ITEMS AS WELL (AND DOESN'T DELETE DEFAULT LISTS) */
CREATE OR ALTER TRIGGER USERLIST_DELETE FOR USERLIST
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (OLD.LISTTYPEID > 1) THEN EXCEPTION GOT_HERE 'Cannot delete Default Lists.';

  DELETE FROM USERLISTITEMS WHERE USERLISTID = OLD.ID;
END
^

SET TERM ; ^

DROP TRIGGER LIST_INSERT;
DROP TRIGGER LISTITEMS_INSERT;
DROP TRIGGER USER_RATING_INSERT;
DROP GENERATOR GEN_LIST_ID;
DROP GENERATOR GEN_LISTITEMS_ID;
DROP GENERATOR GEN_USER_RATING_ID;
DROP TABLE LIST;
DROP TABLE LISTITEMS;
DROP TABLE USER_RATING;