/* also need to review triggers and ensure all fields are getting initialized properly. */
ALTER TABLE USERLISTITEMS ADD MODIFIEDON TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE ACTIVITY ALTER COLUMN SORTORDER POSITION 4;
ALTER TABLE ACTIVITY ADD DELETED SMALLINT DEFAULT 0;
ALTER TABLE ACTIVITY ADD DELETEDON TIMESTAMP;
ALTER TABLE ACTIVITY ALTER COLUMN DELETED POSITION 15;
ALTER TABLE ACTIVITY ALTER COLUMN DELETEDON POSITION 16;

CREATE INDEX AUTHOR_PEOPLE ON AUTHOR (PEOPLEID);
CREATE INDEX PLATFORM_ENTITY ON PLATFORM (ENTITYID);
CREATE INDEX PRODUCTION_ENTITY ON PRODUCTION (ENTITYID);
CREATE INDEX TITLEGENRE_GENRE ON TITLEGENRE (GENREID);


SET TERM !! ;

CREATE OR ALTER TRIGGER ACTIVITY_INSERT FOR ACTIVITY
ACTIVE BEFORE INSERT POSITION 0
AS
  DECLARE VARIABLE EXIST_ID INTEGER;
  DECLARE VARIABLE EXIST_STATUS SMALLINT;
BEGIN
  IF (NEW.COMPLETED IS NULL) THEN NEW.COMPLETED = 0;
  IF (NEW.DNF IS NULL) THEN NEW.DNF = 0;
  IF (NEW.REVIEWED IS NULL) THEN NEW.REVIEWED = 0;
  IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
  IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
  IF (NEW.DELETED IS NULL) THEN NEW.DELETED = 0;

  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';

  IF (NEW.STATUSID IS NULL OR NEW.STATUSID NOT BETWEEN 1 AND 4) THEN EXCEPTION FIELD_REQUIRED 'Valid StatusId (1-4) is required.';
  IF ((NEW.RATING IS NOT NULL) AND (NEW.RATING NOT BETWEEN 0 AND 5)) THEN EXCEPTION FIELD_REQUIRED 'Valid Review (0-5) is required.';
  
  -- Only check for statuses 1/2. 3/4 are always allowed.
  IF (NEW.STATUSID IN (1,2)) THEN BEGIN
    /* Lock any existing 1/2 row for this (USERID, TITLEID) to avoid concurrent updates. */
    SELECT FIRST 1 ID, STATUSID
    FROM ACTIVITY
    WHERE USERID  = :NEW.USERID
      AND TITLEID = :NEW.TITLEID
      AND STATUSID IN (1,2)
    FOR UPDATE WITH LOCK
    INTO :EXIST_ID, :EXIST_STATUS;

    IF (EXIST_ID IS NOT NULL) THEN BEGIN
      IF (NEW.STATUSID = 2) THEN BEGIN
        /* Flip to In-Progress */
        /* Preserve an existing STARTDATE, 
            Else use NEW.STARTDATE if the UI provided it, 
            Else default to CURRENT_DATE 
        */
        UPDATE ACTIVITY
          SET STATUSID   = 2,
              STARTDATE  = COALESCE(STARTDATE, :NEW.STARTDATE, CURRENT_DATE),
              MODIFIEDON = CURRENT_TIMESTAMP
        WHERE ID = :EXIST_ID
          AND (STATUSID <> 2 OR STARTDATE IS NULL);
      END ELSE BEGIN
        /* Flip to Planned */
        UPDATE ACTIVITY
          SET STATUSID   = 1,
              MODIFIEDON = CURRENT_TIMESTAMP
        WHERE ID = :EXIST_ID
          AND STATUSID <> 1;
      END

      -- Cancel the new insert (we already converted the existing row).
      EXCEPTION NO_OP 'Existing activity updated; no new row inserted.';
    END
  END

  /* PLANNED */
  IF (NEW.STATUSID = 1) THEN BEGIN
    NEW.STARTDATE  = NULL;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* IN-PROGRESS */
  ELSE IF (NEW.STATUSID = 2) THEN BEGIN
    IF (NEW.STARTDATE IS NULL) THEN NEW.STARTDATE = CURRENT_DATE;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* COMPLETED */
  ELSE IF (NEW.STATUSID = 3) THEN BEGIN
    NEW.COMPLETED  = 1;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
    IF (NEW.FINISHDATE IS NOT NULL AND NEW.STARTDATE IS NULL) THEN
      NEW.STARTDATE = NEW.FINISHDATE;
  END
  /* DID NOT FINISH */
  ELSE IF (NEW.STATUSID = 4) THEN BEGIN
    NEW.COMPLETED  = 0;
    NEW.DNF        = 1;
    IF (NEW.DNFON IS NULL) THEN NEW.DNFON = CURRENT_TIMESTAMP;
  END

  IF (NEW.REVIEWED = 1) THEN BEGIN
    IF (NEW.REVIEWEDON IS NULL) THEN NEW.REVIEWEDON = CURRENT_TIMESTAMP;
    IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
    IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
    /* RATING: leave as provided (NULL allowed) */
  END
  ELSE BEGIN
    NEW.REVIEWED   = 0;
    NEW.REVIEWEDON = NULL;
    NEW.RATING     = NULL;
    NEW.REVIEWTEXT = '';
    NEW.HIDEREVIEW = 0;
  END

  IF (NEW.DELETED = 0) THEN NEW.DELETEDON = NULL;
  IF (NEW.DELETED = 1) THEN NEW.DELETEDON = CURRENT_TIMESTAMP;

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_ACTIVITY_ID, 1);
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER ACTIVITY_UPDATE FOR ACTIVITY
ACTIVE BEFORE UPDATE POSITION 0
AS
  DECLARE VARIABLE OTHER_ID INTEGER;
BEGIN
  IF (NEW.COMPLETED IS NULL) THEN NEW.COMPLETED = 0;
  IF (NEW.DNF IS NULL) THEN NEW.DNF = 0;
  IF (NEW.REVIEWED IS NULL) THEN NEW.REVIEWED = 0;
  IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
  IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
  IF (NEW.DELETED IS NULL) THEN NEW.DELETED = 0;

  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.TITLEID IS DISTINCT FROM OLD.TITLEID) THEN EXCEPTION GOT_HERE 'Cannot change Title.';
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';

  IF (NEW.STATUSID IS NULL OR NEW.STATUSID NOT BETWEEN 1 AND 4) THEN EXCEPTION FIELD_REQUIRED 'Valid StatusId (1-4) is required.';
  IF ((NEW.RATING IS NOT NULL) AND (NEW.RATING NOT BETWEEN 0 AND 5)) THEN EXCEPTION FIELD_REQUIRED 'Valid Review (0-5) is required.';

  IF (NEW.STATUSID IN (1,2)) THEN BEGIN
    -- If updating THIS row into 1/2, ensure no other 1/2 exists.
    SELECT FIRST 1 ID
      FROM ACTIVITY
     WHERE USERID  = :NEW.USERID
       AND TITLEID = :NEW.TITLEID
       AND STATUSID IN (1,2)
       AND ID <> :OLD.ID
     FOR UPDATE WITH LOCK
     INTO :OTHER_ID;

    IF (OTHER_ID IS NOT NULL) THEN EXCEPTION ACTIVITY_DUP;
  END

  /* PLANNED */
  IF (NEW.STATUSID = 1) THEN BEGIN
    NEW.STARTDATE  = NULL;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* IN-PROGRESS */
  ELSE IF (NEW.STATUSID = 2) THEN BEGIN
    NEW.STARTDATE  = COALESCE(NEW.STARTDATE, OLD.STARTDATE, CURRENT_DATE);
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* COMPLETED */
  ELSE IF (NEW.STATUSID = 3) THEN BEGIN
    NEW.COMPLETED  = 1;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
    IF (NEW.FINISHDATE IS NOT NULL AND NEW.STARTDATE IS NULL) THEN
      NEW.STARTDATE = NEW.FINISHDATE;
  END
  /* DID NOT FINISH */
  ELSE IF (NEW.STATUSID = 4) THEN BEGIN
    NEW.COMPLETED  = 0;
    NEW.DNF        = 1;
    IF (NEW.DNFON IS NULL) THEN NEW.DNFON = CURRENT_TIMESTAMP;
  END

  /* Review fields */
  IF (NEW.REVIEWED = 1) THEN BEGIN
    IF (NEW.REVIEWEDON IS NULL) THEN NEW.REVIEWEDON = CURRENT_TIMESTAMP;
    IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
    IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
    -- rating: leave as provided (NULL or 0â€“5)
  END
  ELSE BEGIN
    NEW.REVIEWED   = 0;
    NEW.REVIEWEDON = NULL;
    NEW.RATING     = NULL;
    NEW.REVIEWTEXT = '';
    NEW.HIDEREVIEW = 0;
  END
  
  IF ((NEW.DELETED) <> (OLD.DELETED)) THEN BEGIN
    IF (NEW.DELETED = 0) THEN NEW.DELETEDON = NULL;
    IF (NEW.DELETED = 1) THEN NEW.DELETEDON = CURRENT_TIMESTAMP;
  END

  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER ACTIVITY_DELETE FOR ACTIVITY
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (EXISTS(SELECT 1 FROM DAILYLOG WHERE ACTIVITYID = OLD.ID)) THEN EXCEPTION DATA_LINKED 'This activity has Daily Log entries and cannot be deleted.';
END
!!

CREATE OR ALTER TRIGGER AUTHOR_INSERT FOR AUTHOR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;

  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.PEOPLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'PeopleId is required.';
END
!!

CREATE OR ALTER TRIGGER AUTHOR_UPDATE FOR AUTHOR
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;

  IF (NEW.TITLEID IS DISTINCT FROM OLD.TITLEID) THEN EXCEPTION GOT_HERE 'Cannot change TitleId.';
  IF (NEW.PEOPLEID IS DISTINCT FROM OLD.PEOPLEID) THEN EXCEPTION GOT_HERE 'Cannot change PeopleId.';
END
!!

CREATE OR ALTER TRIGGER DAILYLOG_INSERT FOR DAILYLOG
ACTIVE BEFORE INSERT POSITION 0
AS
  DECLARE VARIABLE ACTIVITY_USERID INTEGER;
BEGIN
  IF (NEW.PROGRESS IS NULL) THEN NEW.PROGRESS = 0;
  IF ((NEW.NOTES IS NULL) OR (TRIM(NEW.NOTES) = '')) THEN NEW.NOTES = '';

  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.ACTIVITYID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'ActivityId is required.';
  IF (NEW.ACTIVITYDATE IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Activity Date is required.';

  /* Activity must exist and belong to this user */
  SELECT USERID FROM ACTIVITY WHERE ID = :NEW.ACTIVITYID INTO :ACTIVITY_USERID;
  IF (ACTIVITY_USERID IS NULL) THEN EXCEPTION GOT_HERE 'Activity not found.';
  IF (ACTIVITY_USERID <> NEW.USERID) THEN EXCEPTION GOT_HERE 'Log user does not match Activity user.';

  /* Progress rules */
  IF (NEW.PROGRESS < 0) THEN EXCEPTION GOT_HERE 'Progress cannot be negative.';
  IF (NEW.PROGRESS > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required when Progress > 0.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_DAILYLOG_ID,1);
END
!!

CREATE OR ALTER TRIGGER DAILYLOG_UPDATE FOR DAILYLOG
ACTIVE BEFORE UPDATE POSITION 0
AS
  DECLARE VARIABLE ACTIVITY_USERID INTEGER;
BEGIN
  IF (NEW.PROGRESS IS NULL) THEN NEW.PROGRESS = 0;  
  IF (NEW.NOTES IS NULL OR TRIM(NEW.NOTES) = '') THEN NEW.NOTES = '';

  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.ACTIVITYID IS DISTINCT FROM OLD.ACTIVITYID) THEN EXCEPTION GOT_HERE 'Cannot change Activity.';
  IF (NEW.ACTIVITYDATE IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Activity Date is required.';

  /* Activity must exist and belong to this user */
  SELECT USERID FROM ACTIVITY WHERE ID = :NEW.ACTIVITYID INTO :ACTIVITY_USERID;
  IF (ACTIVITY_USERID IS NULL) THEN EXCEPTION GOT_HERE 'Activity not found.';
  IF (ACTIVITY_USERID <> NEW.USERID) THEN EXCEPTION GOT_HERE 'Log user does not match Activity user.';

  /* Progress rules */
  IF (NEW.PROGRESS < 0) THEN EXCEPTION GOT_HERE 'Progress cannot be negative.';
  IF (NEW.PROGRESS > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required when Progress > 0.';
END
!!

CREATE OR ALTER TRIGGER ENTITY_INSERT FOR ENTITY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Entity Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Entity Type is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_ENTITY_ID,1);
END
!!

CREATE OR ALTER TRIGGER ENTITY_UPDATE FOR ENTITY
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Entity Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Entity Type is required.';
END
!!

CREATE OR ALTER TRIGGER ENTITY_DELETE FOR ENTITY
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF ((EXISTS(SELECT 1 FROM PLATFORM WHERE ENTITYID = OLD.ID)) OR (EXISTS(SELECT 1 FROM PRODUCTION WHERE ENTITYID = OLD.ID))) THEN EXCEPTION DATA_LINKED 'This entity has linked records and cannot be deleted.';
END
!!

CREATE OR ALTER TRIGGER GENRE_INSERT FOR GENRE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ISENTERTAINMENT IS NULL) THEN NEW.ISENTERTAINMENT = 0;
  IF (NEW.ISBOOK IS NULL) THEN NEW.ISBOOK = 0;

  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Genre Name is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_GENRE_ID,1);
END
!!

CREATE OR ALTER TRIGGER GENRE_UPDATE FOR GENRE
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ISENTERTAINMENT IS NULL) THEN NEW.ISENTERTAINMENT = 0;
  IF (NEW.ISBOOK IS NULL) THEN NEW.ISBOOK = 0;

  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Genre Name is required.';
END
!!

CREATE OR ALTER TRIGGER GENRE_DELETE FOR GENRE
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (EXISTS(SELECT 1 FROM TITLEGENRE WHERE GENREID = OLD.ID)) THEN EXCEPTION DATA_LINKED 'This genre has linked records and cannot be deleted.';
END
!!

CREATE OR ALTER TRIGGER PEOPLE_INSERT FOR PEOPLE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.FIRSTNAME IS NULL) THEN EXCEPTION FIELD_REQUIRED 'First Name is required.';
  IF (NEW.LASTNAME IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Last Name is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_PEOPLE_ID,1);
END
!!

CREATE OR ALTER TRIGGER PEOPLE_UPDATE FOR PEOPLE
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.FIRSTNAME IS NULL) THEN EXCEPTION FIELD_REQUIRED 'First Name is required.';
  IF (NEW.LASTNAME IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Last Name is required.';
END
!!

CREATE OR ALTER TRIGGER PEOPLE_DELETE FOR PEOPLE
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (EXISTS(SELECT 1 FROM AUTHOR WHERE PEOPLEID = OLD.ID)) THEN EXCEPTION DATA_LINKED 'This person has linked records and cannot be deleted.';
END
!!

CREATE OR ALTER TRIGGER PLATFORM_INSERT FOR PLATFORM
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;

  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.ENTITYID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'EntityId is required.';
END
!!

CREATE OR ALTER TRIGGER PLATFORM_UPDATE FOR PLATFORM
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;

  IF (NEW.TITLEID IS DISTINCT FROM OLD.TITLEID) THEN EXCEPTION GOT_HERE 'Cannot change TitleId.';
  IF (NEW.ENTITYID IS DISTINCT FROM OLD.ENTITYID) THEN EXCEPTION GOT_HERE 'Cannot change EntityId.';
END
!!

CREATE OR ALTER TRIGGER PRODUCTION_INSERT FOR PRODUCTION
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;

  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.ENTITYID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'EntityId is required.';
END
!!

CREATE OR ALTER TRIGGER PRODUCTION_UPDATE FOR PRODUCTION
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;

  IF (NEW.TITLEID IS DISTINCT FROM OLD.TITLEID) THEN EXCEPTION GOT_HERE 'Cannot change TitleId.';
  IF (NEW.ENTITYID IS DISTINCT FROM OLD.ENTITYID) THEN EXCEPTION GOT_HERE 'Cannot change EntityId.';
END
!!

CREATE OR ALTER TRIGGER SERIES_UPDATE FOR SERIES
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Series Name is required.';
END
!!

CREATE OR ALTER TRIGGER SERIES_DELETE FOR SERIES
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  UPDATE TITLE SET SERIESID = 0, ORDERID = NULL WHERE SERIESID = OLD.ID;
END
!!

CREATE OR ALTER TRIGGER STATUSCODES_INSERT FOR STATUSCODES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Status Name is required.';
END
!!

CREATE OR ALTER TRIGGER STATUSCODES_UPDATE FOR STATUSCODES
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Status Name is required.';
END
!!

CREATE OR ALTER TRIGGER STATUSCODES_DELETE FOR STATUSCODES
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (EXISTS(SELECT 1 FROM ACTIVITY WHERE STATUSID = OLD.ID)) THEN EXCEPTION DATA_LINKED 'This status has linked records and cannot be deleted.';
END
!!

CREATE OR ALTER TRIGGER TITLE_INSERT FOR TITLE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.SERIESID IS NULL) THEN NEW.SERIESID = 0;
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;
  IF (NEW.CONTENT_SIZE IS NULL) THEN NEW.CONTENT_SIZE = 0;
  IF (NEW.IMAGEFILE IS NULL) THEN NEW.IMAGEFILE = '';

  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Title is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';
  IF (NEW.CONTENT_SIZE > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_TITLE_ID,1);
END
!!

CREATE OR ALTER TRIGGER TITLE_UPDATE FOR TITLE
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.SERIESID IS NULL) THEN NEW.SERIESID = 0;
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;
  IF (NEW.CONTENT_SIZE IS NULL) THEN NEW.CONTENT_SIZE = 0;
  IF (NEW.IMAGEFILE IS NULL) THEN NEW.IMAGEFILE = '';

  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Title is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';
  IF (NEW.CONTENT_SIZE > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required.';
END
!!

CREATE OR ALTER TRIGGER TITLE_DELETE FOR TITLE
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (
      (EXISTS(SELECT 1 FROM ACTIVITY WHERE TITLEID = OLD.ID)) OR 
      (EXISTS(SELECT 1 FROM AUTHOR WHERE TITLEID = OLD.ID)) OR 
      (EXISTS(SELECT 1 FROM PLATFORM WHERE TITLEID = OLD.ID)) OR 
      (EXISTS(SELECT 1 FROM PRODUCTION WHERE TITLEID = OLD.ID)) OR 
      (EXISTS(SELECT 1 FROM TITLEGENRE WHERE TITLEID = OLD.ID)) OR 
      (EXISTS(SELECT 1 FROM USERLISTITEMS WHERE TITLEID = OLD.ID)))
    THEN EXCEPTION DATA_LINKED 'This title has linked records and cannot be deleted.';
END
!!

CREATE OR ALTER TRIGGER TITLEGENRE_INSERT FOR TITLEGENRE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;

  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.GENREID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'GenreId is required.';
END
!!

CREATE OR ALTER TRIGGER TITLEGENRE_UPDATE FOR TITLEGENRE
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ORDERID IS NULL) THEN NEW.ORDERID = 0;

  IF (NEW.TITLEID IS DISTINCT FROM OLD.TITLEID) THEN EXCEPTION GOT_HERE 'Cannot change TitleId.';
  IF (NEW.GENREID IS DISTINCT FROM OLD.GENREID) THEN EXCEPTION GOT_HERE 'Cannot change GenreId.';
END
!!

CREATE OR ALTER TRIGGER TYPECODES_INSERT FOR TYPECODES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Type Name is required.';
END
!!

CREATE OR ALTER TRIGGER TYPECODES_UPDATE FOR TYPECODES
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Type Name is required.';
END
!!

CREATE OR ALTER TRIGGER TYPECODES_DELETE FOR TYPECODES
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (
      (EXISTS(SELECT 1 FROM ENTITY WHERE TYPEID = OLD.ID)) OR 
      (EXISTS(SELECT 1 FROM TITLE WHERE TYPEID = OLD.ID)) OR 
      (EXISTS(SELECT 1 FROM USERLIST WHERE TYPEID = OLD.ID)))
    THEN EXCEPTION DATA_LINKED 'This type has linked records and cannot be deleted.';
END
!!

CREATE OR ALTER TRIGGER UOM_INSERT FOR UOM
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure Name is required.';
END
!!

CREATE OR ALTER TRIGGER UOM_UPDATE FOR UOM
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure Name is required.';
END
!!

CREATE OR ALTER TRIGGER UOM_DELETE FOR UOM
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (
      (EXISTS(SELECT 1 FROM DAILYLOG WHERE UOMID = OLD.ID)) OR 
      (EXISTS(SELECT 1 FROM TITLE WHERE UOMID = OLD.ID)))
    THEN EXCEPTION DATA_LINKED 'This unit of measure has linked records and cannot be deleted.';
END
!!

CREATE OR ALTER TRIGGER USERLIST_INSERT FOR USERLIST
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.LONGDESCRIPT IS NULL OR TRIM(NEW.LONGDESCRIPT) = '') THEN NEW.LONGDESCRIPT = '';
  IF (NEW.ISPRIVATE IS NULL) THEN NEW.ISPRIVATE = 0;
  IF (NEW.OVERRIDE IS NULL) THEN NEW.OVERRIDE = 0;

  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';  

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERLIST_ID,1);
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER USERLIST_UPDATE FOR USERLIST
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.LONGDESCRIPT IS NULL OR TRIM(NEW.LONGDESCRIPT) = '') THEN NEW.LONGDESCRIPT = '';
  IF (NEW.ISPRIVATE IS NULL) THEN NEW.ISPRIVATE = 0;
  IF (NEW.OVERRIDE IS NULL) THEN NEW.OVERRIDE = 0;

  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.TYPEID IS DISTINCT FROM OLD.TYPEID) THEN EXCEPTION GOT_HERE 'Cannot change Media Type.';
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';
  
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';

  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER USERLISTITEMS_INSERT FOR USERLISTITEMS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.SORTORDER IS NULL) THEN NEW.SORTORDER = 0;

  IF (NEW.USERLISTID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserListId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERLISTITEMS_ID,1);
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER USERLISTITEMS_UPDATE FOR USERLISTITEMS
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.SORTORDER IS NULL) THEN NEW.SORTORDER = 0;

  IF (NEW.USERLISTID IS DISTINCT FROM OLD.USERLISTID) THEN EXCEPTION GOT_HERE 'Cannot change UserList.';
  IF (NEW.TITLEID IS DISTINCT FROM OLD.TITLEID) THEN EXCEPTION GOT_HERE 'Cannot change Title.';    
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';

  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER USERS_INSERT FOR USERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.EMAIL IS NULL OR TRIM(NEW.EMAIL) = '') THEN NEW.EMAIL = '';

  IF (NEW.FIRSTNAME IS NULL OR TRIM(NEW.FIRSTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'First Name is required.';
  IF (NEW.LASTNAME IS NULL OR TRIM(NEW.LASTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Last Name is required.';
  IF (NEW.USERNAME IS NULL OR TRIM(NEW.USERNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Username is required.';
  IF (NEW.PASSWORD_HASH IS NULL OR TRIM(NEW.PASSWORD_HASH) = '') THEN EXCEPTION FIELD_REQUIRED 'Password is required.';
  
  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERS_ID,1);
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER USERS_UPDATE FOR USERS
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.EMAIL IS NULL OR TRIM(NEW.EMAIL) = '') THEN NEW.EMAIL = '';

  IF (NEW.FIRSTNAME IS NULL OR TRIM(NEW.FIRSTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'First Name is required.';
  IF (NEW.LASTNAME IS NULL OR TRIM(NEW.LASTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Last Name is required.';
  IF (NEW.USERNAME IS NULL OR TRIM(NEW.USERNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Username is required.';
  IF (NEW.PASSWORD_HASH IS NULL OR TRIM(NEW.PASSWORD_HASH) = '') THEN EXCEPTION FIELD_REQUIRED 'Password is required.';
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';
  
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

CREATE OR ALTER TRIGGER USERS_DELETE FOR USERS
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  DELETE FROM USERLIST    WHERE USERID = OLD.ID;  /* DELETES BOTH THE LIST AND LIST ITEMS */
  DELETE FROM DAILYLOG    WHERE USERID = OLD.ID;
  DELETE FROM ACTIVITY    WHERE USERID = OLD.ID;
END
!!

SET TERM ; !!