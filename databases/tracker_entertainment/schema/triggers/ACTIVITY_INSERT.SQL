SET TERM !! ;

CREATE OR ALTER TRIGGER ACTIVITY_INSERT FOR ACTIVITY
ACTIVE BEFORE INSERT POSITION 0
AS
  DECLARE VARIABLE EXIST_ID INTEGER;
  DECLARE VARIABLE EXIST_STATUS SMALLINT;
BEGIN
  IF (NEW.COMPLETED IS NULL) THEN NEW.COMPLETED = 0;
  IF (NEW.DNF IS NULL) THEN NEW.DNF = 0;
  IF (NEW.REVIEWED IS NULL) THEN NEW.REVIEWED = 0;
  IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
  IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
  IF (NEW.DELETED IS NULL) THEN NEW.DELETED = 0;

  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';

  IF (NEW.STATUSID IS NULL OR NEW.STATUSID NOT BETWEEN 1 AND 4) THEN EXCEPTION FIELD_REQUIRED 'Valid StatusId (1-4) is required.';
  IF ((NEW.RATING IS NOT NULL) AND (NEW.RATING NOT BETWEEN 0 AND 5)) THEN EXCEPTION FIELD_REQUIRED 'Valid Review (0-5) is required.';
  
  -- Only check for statuses 1/2. 3/4 are always allowed.
  IF (NEW.STATUSID IN (1,2)) THEN BEGIN
    /* Lock any existing 1/2 row for this (USERID, TITLEID) to avoid concurrent updates. */
    SELECT FIRST 1 ID, STATUSID
    FROM ACTIVITY
    WHERE USERID  = :NEW.USERID
      AND TITLEID = :NEW.TITLEID
      AND STATUSID IN (1,2)
    FOR UPDATE WITH LOCK
    INTO :EXIST_ID, :EXIST_STATUS;

    IF (EXIST_ID IS NOT NULL) THEN BEGIN
      IF (NEW.STATUSID = 2) THEN BEGIN
        /* Flip to In-Progress */
        /* Preserve an existing STARTDATE, 
            Else use NEW.STARTDATE if the UI provided it, 
            Else default to CURRENT_DATE 
        */
        UPDATE ACTIVITY
          SET STATUSID   = 2,
              STARTDATE  = COALESCE(STARTDATE, :NEW.STARTDATE, CURRENT_DATE),
              MODIFIEDON = CURRENT_TIMESTAMP
        WHERE ID = :EXIST_ID
          AND (STATUSID <> 2 OR STARTDATE IS NULL);
      END ELSE BEGIN
        /* Flip to Planned */
        UPDATE ACTIVITY
          SET STATUSID   = 1,
              MODIFIEDON = CURRENT_TIMESTAMP
        WHERE ID = :EXIST_ID
          AND STATUSID <> 1;
      END

      -- Cancel the new insert (we already converted the existing row).
      EXCEPTION NO_OP 'Existing activity updated; no new row inserted.';
    END
  END

  /* PLANNED */
  IF (NEW.STATUSID = 1) THEN BEGIN
    NEW.STARTDATE  = NULL;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* IN-PROGRESS */
  ELSE IF (NEW.STATUSID = 2) THEN BEGIN
    IF (NEW.STARTDATE IS NULL) THEN NEW.STARTDATE = CURRENT_DATE;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* COMPLETED */
  ELSE IF (NEW.STATUSID = 3) THEN BEGIN
    NEW.COMPLETED  = 1;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
    IF (NEW.FINISHDATE IS NOT NULL AND NEW.STARTDATE IS NULL) THEN
      NEW.STARTDATE = NEW.FINISHDATE;
  END
  /* DID NOT FINISH */
  ELSE IF (NEW.STATUSID = 4) THEN BEGIN
    NEW.COMPLETED  = 0;
    NEW.DNF        = 1;
    IF (NEW.DNFON IS NULL) THEN NEW.DNFON = CURRENT_TIMESTAMP;
  END

  IF (NEW.REVIEWED = 1) THEN BEGIN
    IF (NEW.REVIEWEDON IS NULL) THEN NEW.REVIEWEDON = CURRENT_TIMESTAMP;
    IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
    IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
    /* RATING: leave as provided (NULL allowed) */
  END
  ELSE BEGIN
    NEW.REVIEWED   = 0;
    NEW.REVIEWEDON = NULL;
    NEW.RATING     = NULL;
    NEW.REVIEWTEXT = '';
    NEW.HIDEREVIEW = 0;
  END

  IF (NEW.DELETED = 0) THEN NEW.DELETEDON = NULL;
  IF (NEW.DELETED = 1) THEN NEW.DELETEDON = CURRENT_TIMESTAMP;

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_ACTIVITY_ID, 1);
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
!!

SET TERM ; !!