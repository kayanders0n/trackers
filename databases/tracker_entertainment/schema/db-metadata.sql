/******************************************************************************/
/****        Generated by IBExpert 2021.12.6.1 9/9/2025 3:33:59 PM         ****/
/******************************************************************************/

/******************************************************************************/
/****     Following SET SQL DIALECT is just for the Database Comparer      ****/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR GEN_ACTIVITY_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_DAILYLOG_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_ENTITY_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_GENRE_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_PEOPLE_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_SERIES_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_TITLE_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_USERLISTITEMS_ID START WITH 1 INCREMENT BY 1;
CREATE GENERATOR GEN_USERLIST_ID START WITH 100 INCREMENT BY 1;
CREATE GENERATOR GEN_USERS_ID START WITH 1 INCREMENT BY 1;


/******************************************************************************/
/****                              Exceptions                              ****/
/******************************************************************************/

CREATE EXCEPTION ACTIVITY_DUP 'Already have a Planned/In-Progress activity for this title.';

CREATE EXCEPTION DATA_LINKED 'Item is linked to another item and cannot be deleted.';

CREATE EXCEPTION FIELD_REQUIRED 'This field is required.';

CREATE EXCEPTION GOT_HERE 'Got here.';

CREATE EXCEPTION NO_OP 'No operation.';



/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE ACTIVITY (
    ID          INTEGER NOT NULL,
    USERID      INTEGER NOT NULL,
    TITLEID     INTEGER NOT NULL,
    STATUSID    INTEGER,
    STARTDATE   DATE,
    FINISHDATE  DATE,
    COMPLETED   INTEGER DEFAULT 0,
    DNF         SMALLINT,
    DNFON       TIMESTAMP,
    REVIEWED    SMALLINT,
    REVIEWEDON  TIMESTAMP,
    RATING      DOUBLE PRECISION,
    REVIEWTEXT  VARCHAR(2000),
    HIDEREVIEW  SMALLINT,
    CREATEDON   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFIEDON  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE AUTHOR (
    TITLEID   INTEGER NOT NULL,
    PEOPLEID  INTEGER NOT NULL,
    ORDERID   INTEGER
);

CREATE TABLE DAILYLOG (
    ID            INTEGER NOT NULL,
    USERID        INTEGER NOT NULL,
    ACTIVITYID    INTEGER,
    ACTIVITYDATE  DATE NOT NULL,
    PROGRESS      INTEGER,
    UOMID         INTEGER,
    NOTES         VARCHAR(6144)
);

CREATE TABLE ENTITY (
    ID        INTEGER NOT NULL,
    DESCRIPT  VARCHAR(50) NOT NULL,
    TYPEID    INTEGER
);

CREATE TABLE GENRE (
    ID               INTEGER NOT NULL,
    DESCRIPT         VARCHAR(25) NOT NULL,
    ISENTERTAINMENT  INTEGER,
    ISBOOK           INTEGER
);

CREATE TABLE PEOPLE (
    ID         INTEGER NOT NULL,
    FIRSTNAME  VARCHAR(25),
    LASTNAME   VARCHAR(25)
);

CREATE TABLE PLATFORM (
    TITLEID   INTEGER NOT NULL,
    ENTITYID  INTEGER NOT NULL,
    ORDERID   INTEGER
);

CREATE TABLE PRODUCTION (
    TITLEID   INTEGER NOT NULL,
    ENTITYID  INTEGER NOT NULL,
    ORDERID   INTEGER
);

CREATE TABLE SERIES (
    ID        INTEGER NOT NULL,
    DESCRIPT  VARCHAR(50) NOT NULL
);

CREATE TABLE STATUSCODES (
    ID        INTEGER NOT NULL,
    DESCRIPT  VARCHAR(80)
);

CREATE TABLE TITLE (
    ID            INTEGER NOT NULL,
    DESCRIPT      VARCHAR(50) NOT NULL,
    TYPEID        INTEGER NOT NULL,
    SERIESID      INTEGER,
    ORDERID       DOUBLE PRECISION,
    FIRSTRELEASE  DATE,
    CONTENT_SIZE  INTEGER,
    UOMID         INTEGER,
    IMAGEFILE     VARCHAR(250)
);

CREATE TABLE TITLEGENRE (
    TITLEID  INTEGER NOT NULL,
    GENREID  INTEGER NOT NULL,
    ORDERID  INTEGER
);

CREATE TABLE TYPECODES (
    ID        INTEGER NOT NULL,
    DESCRIPT  VARCHAR(50)
);

CREATE TABLE UOM (
    ID        INTEGER NOT NULL,
    DESCRIPT  VARCHAR(10) NOT NULL
);

CREATE TABLE USERLIST (
    ID            INTEGER NOT NULL,
    USERID        INTEGER NOT NULL,
    DESCRIPT      VARCHAR(25) NOT NULL,
    LONGDESCRIPT  VARCHAR(50),
    TYPEID        INTEGER NOT NULL,
    ISPRIVATE     INTEGER DEFAULT 0,
    OVERRIDE      INTEGER DEFAULT 0,
    CREATEDON     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFIEDON    TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE USERLISTITEMS (
    ID          INTEGER NOT NULL,
    USERLISTID  INTEGER NOT NULL,
    TITLEID     INTEGER NOT NULL,
    CREATEDON   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SORTORDER   INTEGER
);

CREATE TABLE USERS (
    ID             INTEGER NOT NULL,
    FIRSTNAME      VARCHAR(50) NOT NULL,
    LASTNAME       VARCHAR(50) NOT NULL,
    USERNAME       VARCHAR(50) NOT NULL,
    PASSWORD_HASH  VARCHAR(255) NOT NULL,
    EMAIL          VARCHAR(100),
    CREATEDON      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFIEDON     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



/******************************************************************************/
/****                          Unique constraints                          ****/
/******************************************************************************/

ALTER TABLE AUTHOR ADD UNIQUE (TITLEID, PEOPLEID);
ALTER TABLE DAILYLOG ADD UNIQUE (ACTIVITYID, ACTIVITYDATE);
ALTER TABLE PLATFORM ADD UNIQUE (TITLEID, ENTITYID);
ALTER TABLE PRODUCTION ADD UNIQUE (TITLEID, ENTITYID);
ALTER TABLE TITLEGENRE ADD UNIQUE (TITLEID, GENREID);
ALTER TABLE USERLISTITEMS ADD UNIQUE (USERLISTID, TITLEID);
ALTER TABLE USERS ADD UNIQUE (USERNAME);


/******************************************************************************/
/****                             Primary keys                             ****/
/******************************************************************************/

ALTER TABLE ACTIVITY ADD PRIMARY KEY (ID);
ALTER TABLE DAILYLOG ADD PRIMARY KEY (ID);
ALTER TABLE ENTITY ADD PRIMARY KEY (ID);
ALTER TABLE GENRE ADD PRIMARY KEY (ID);
ALTER TABLE PEOPLE ADD PRIMARY KEY (ID);
ALTER TABLE SERIES ADD PRIMARY KEY (ID);
ALTER TABLE STATUSCODES ADD PRIMARY KEY (ID);
ALTER TABLE TITLE ADD PRIMARY KEY (ID);
ALTER TABLE TYPECODES ADD PRIMARY KEY (ID);
ALTER TABLE UOM ADD PRIMARY KEY (ID);
ALTER TABLE USERLIST ADD PRIMARY KEY (ID);
ALTER TABLE USERLISTITEMS ADD PRIMARY KEY (ID);
ALTER TABLE USERS ADD PRIMARY KEY (ID);


/******************************************************************************/
/****                               Indices                                ****/
/******************************************************************************/

CREATE INDEX ACTIVITY_USER ON ACTIVITY (USERID);
CREATE INDEX ACTIVITY_USER_STATUS ON ACTIVITY (USERID, STATUSID);
CREATE INDEX DAILYLOG_ACTIVITY ON DAILYLOG (ACTIVITYID);


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: ACTIVITY_INSERT */
CREATE OR ALTER TRIGGER ACTIVITY_INSERT FOR ACTIVITY
ACTIVE BEFORE INSERT POSITION 0
AS
  DECLARE VARIABLE EXIST_ID INTEGER;
  DECLARE VARIABLE EXIST_STATUS SMALLINT;
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';
  IF (NEW.STATUSID IS NULL OR NEW.STATUSID NOT BETWEEN 1 AND 4) THEN EXCEPTION FIELD_REQUIRED 'Valid StatusId (1-4) is required.';

  -- Only check for statuses 1/2. 3/4 are always allowed.
  IF (NEW.STATUSID IN (1,2)) THEN BEGIN
    /* Lock any existing 1/2 row for this (USERID, TITLEID) to avoid concurrent updates. */
    SELECT FIRST 1 ID, STATUSID
    FROM ACTIVITY
    WHERE USERID  = :NEW.USERID
      AND TITLEID = :NEW.TITLEID
      AND STATUSID IN (1,2)
    FOR UPDATE WITH LOCK
    INTO :EXIST_ID, :EXIST_STATUS;

    IF (EXIST_ID IS NOT NULL) THEN BEGIN
      IF (NEW.STATUSID = 2) THEN BEGIN
        /* Flip to In-Progress */
        /* Preserve an existing STARTDATE, 
            Else use NEW.STARTDATE if the UI provided it, 
            Else default to CURRENT_DATE 
        */
        UPDATE ACTIVITY
          SET STATUSID   = 2,
              STARTDATE  = COALESCE(STARTDATE, :NEW.STARTDATE, CURRENT_DATE),
              MODIFIEDON = CURRENT_TIMESTAMP
        WHERE ID = :EXIST_ID
          AND (STATUSID <> 2 OR STARTDATE IS NULL);
      END ELSE BEGIN
        /* Flip to Planned */
        UPDATE ACTIVITY
          SET STATUSID   = 1,
              MODIFIEDON = CURRENT_TIMESTAMP
        WHERE ID = :EXIST_ID
          AND STATUSID <> 1;
      END

      -- Cancel the new insert (we already converted the existing row).
      EXCEPTION NO_OP 'Existing activity updated; no new row inserted.';
    END
  END

  /* PLANNED */
  IF (NEW.STATUSID = 1) THEN BEGIN
    NEW.STARTDATE  = NULL;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* IN-PROGRESS */
  ELSE IF (NEW.STATUSID = 2) THEN BEGIN
    IF (NEW.STARTDATE IS NULL) THEN NEW.STARTDATE = CURRENT_DATE;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* COMPLETED */
  ELSE IF (NEW.STATUSID = 3) THEN BEGIN
    NEW.COMPLETED  = 1;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
    IF (NEW.FINISHDATE IS NOT NULL AND NEW.STARTDATE IS NULL) THEN
      NEW.STARTDATE = NEW.FINISHDATE;
  END
  /* DID NOT FINISH */
  ELSE IF (NEW.STATUSID = 4) THEN BEGIN
    NEW.COMPLETED  = 0;
    NEW.DNF        = 1;
    IF (NEW.DNFON IS NULL) THEN NEW.DNFON = CURRENT_TIMESTAMP;
  END

  IF (NEW.REVIEWED = 1) THEN BEGIN
    IF (NEW.REVIEWEDON IS NULL) THEN NEW.REVIEWEDON = CURRENT_TIMESTAMP;
    IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
    IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
    /* RATING: leave as provided (NULL allowed) */
  END
  ELSE BEGIN
    NEW.REVIEWED   = 0;
    NEW.REVIEWEDON = NULL;
    NEW.RATING     = NULL;
    NEW.REVIEWTEXT = '';
    NEW.HIDEREVIEW = 0;
  END

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_ACTIVITY_ID, 1);
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: ACTIVITY_UPDATE */
CREATE OR ALTER TRIGGER ACTIVITY_UPDATE FOR ACTIVITY
ACTIVE BEFORE UPDATE POSITION 0
AS
  DECLARE VARIABLE OTHER_ID INTEGER;
BEGIN
  -- immutables
  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.TITLEID IS DISTINCT FROM OLD.TITLEID) THEN EXCEPTION GOT_HERE 'Cannot change Title.';
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';
  IF (NEW.STATUSID IS NULL OR NEW.STATUSID NOT BETWEEN 1 AND 4) THEN EXCEPTION FIELD_REQUIRED 'Valid StatusId (1-4) is required.';

  IF (NEW.STATUSID IN (1,2)) THEN BEGIN
    -- If updating THIS row into 1/2, ensure no other 1/2 exists.
    SELECT FIRST 1 ID
      FROM ACTIVITY
     WHERE USERID  = :NEW.USERID
       AND TITLEID = :NEW.TITLEID
       AND STATUSID IN (1,2)
       AND ID <> :OLD.ID
     FOR UPDATE WITH LOCK
     INTO :OTHER_ID;

    IF (OTHER_ID IS NOT NULL) THEN EXCEPTION ACTIVITY_DUP;
  END

  /* PLANNED */
  IF (NEW.STATUSID = 1) THEN BEGIN
    NEW.STARTDATE  = NULL;
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* IN-PROGRESS */
  ELSE IF (NEW.STATUSID = 2) THEN BEGIN
    NEW.STARTDATE  = COALESCE(NEW.STARTDATE, OLD.STARTDATE, CURRENT_DATE);
    NEW.FINISHDATE = NULL;
    NEW.COMPLETED  = 0;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
  END
  /* COMPLETED */
  ELSE IF (NEW.STATUSID = 3) THEN BEGIN
    NEW.COMPLETED  = 1;
    NEW.DNF        = 0;
    NEW.DNFON      = NULL;
    IF (NEW.FINISHDATE IS NOT NULL AND NEW.STARTDATE IS NULL) THEN
      NEW.STARTDATE = NEW.FINISHDATE;
  END
  /* DID NOT FINISH */
  ELSE IF (NEW.STATUSID = 4) THEN BEGIN
    NEW.COMPLETED  = 0;
    NEW.DNF        = 1;
    IF (NEW.DNFON IS NULL) THEN NEW.DNFON = CURRENT_TIMESTAMP;
  END

  /* Review fields */
  IF (NEW.REVIEWED = 1) THEN BEGIN
    IF (NEW.REVIEWEDON IS NULL) THEN NEW.REVIEWEDON = CURRENT_TIMESTAMP;
    IF (NEW.REVIEWTEXT IS NULL) THEN NEW.REVIEWTEXT = '';
    IF (NEW.HIDEREVIEW IS NULL) THEN NEW.HIDEREVIEW = 0;
    -- rating: leave as provided (NULL or 0?5)
  END
  ELSE BEGIN
    NEW.REVIEWED   = 0;
    NEW.REVIEWEDON = NULL;
    NEW.RATING     = NULL;
    NEW.REVIEWTEXT = '';
    NEW.HIDEREVIEW = 0;
  END

  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: DAILYLOG_INSERT */
CREATE OR ALTER TRIGGER DAILYLOG_INSERT FOR DAILYLOG
ACTIVE BEFORE INSERT POSITION 0
AS
  DECLARE VARIABLE ACTIVITY_USERID INTEGER;
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.ACTIVITYID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'ActivityId is required.';
  IF (NEW.ACTIVITYDATE IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Activity Date is required.';

  /* Activity must exist and belong to this user */
  SELECT USERID FROM ACTIVITY WHERE ID = :NEW.ACTIVITYID INTO :ACTIVITY_USERID;
  IF (ACTIVITY_USERID IS NULL) THEN EXCEPTION GOT_HERE 'Activity not found.';
  IF (ACTIVITY_USERID <> NEW.USERID) THEN EXCEPTION GOT_HERE 'Log user does not match Activity user.';

  /* Progress rules */
  IF (NEW.PROGRESS IS NULL) THEN NEW.PROGRESS = 0;
  IF (NEW.PROGRESS < 0) THEN EXCEPTION GOT_HERE 'Progress cannot be negative.';
  IF (NEW.PROGRESS > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required when Progress > 0.';

  /* Defaults */
  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_DAILYLOG_ID,1);
  IF (NEW.NOTES IS NULL OR TRIM(NEW.NOTES) = '') THEN NEW.NOTES = '';
END
^

/* Trigger: DAILYLOG_UPDATE */
CREATE OR ALTER TRIGGER DAILYLOG_UPDATE FOR DAILYLOG
ACTIVE BEFORE UPDATE POSITION 0
AS
  DECLARE VARIABLE ACTIVITY_USERID INTEGER;
BEGIN
  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.ACTIVITYID IS DISTINCT FROM OLD.ACTIVITYID) THEN EXCEPTION GOT_HERE 'Cannot change Activity.';
  IF (NEW.ACTIVITYDATE IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Activity Date is required.';

  /* Activity must exist and belong to this user */
  SELECT USERID FROM ACTIVITY WHERE ID = :NEW.ACTIVITYID INTO :ACTIVITY_USERID;
  IF (ACTIVITY_USERID IS NULL) THEN EXCEPTION GOT_HERE 'Activity not found.';
  IF (ACTIVITY_USERID <> NEW.USERID) THEN EXCEPTION GOT_HERE 'Log user does not match Activity user.';

  /* Progress rules */
  IF (NEW.PROGRESS IS NULL) THEN NEW.PROGRESS = 0;
  IF (NEW.PROGRESS < 0) THEN EXCEPTION GOT_HERE 'Progress cannot be negative.';
  IF (NEW.PROGRESS > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required when Progress > 0.';

  /* Defaults */
  IF (NEW.NOTES IS NULL OR TRIM(NEW.NOTES) = '') THEN NEW.NOTES = '';
END
^

/* Trigger: ENTITY_INSERT */
CREATE OR ALTER TRIGGER ENTITY_INSERT FOR ENTITY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Entity Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Entity Type is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_ENTITY_ID,1);
END
^

/* Trigger: GENRE_INSERT */
CREATE OR ALTER TRIGGER GENRE_INSERT FOR GENRE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Genre Name is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_GENRE_ID,1);
  IF (NEW.ISENTERTAINMENT IS NULL) THEN NEW.ISENTERTAINMENT = 0;
  IF (NEW.ISBOOK IS NULL) THEN NEW.ISBOOK = 0;
END
^

/* Trigger: GENRE_UPDATE */
CREATE OR ALTER TRIGGER GENRE_UPDATE FOR GENRE
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Genre Name is required.';

  IF (NEW.ISENTERTAINMENT IS NULL) THEN NEW.ISENTERTAINMENT = 0;
  IF (NEW.ISBOOK IS NULL) THEN NEW.ISBOOK = 0;
END
^

/* Trigger: SERIES_DELETE */
CREATE OR ALTER TRIGGER SERIES_DELETE FOR SERIES
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  UPDATE TITLE SET SERIESID = NULL, ORDERID = NULL WHERE SERIESID = OLD.ID;
END
^

/* Trigger: SERIES_INSERT */
CREATE OR ALTER TRIGGER SERIES_INSERT FOR SERIES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Series Name is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_SERIES_ID,1);
END
^

/* Trigger: TITLE_DELETE */
CREATE OR ALTER TRIGGER TITLE_DELETE FOR TITLE
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  IF (EXISTS(SELECT FIRST 1 ID FROM ACTIVITY       WHERE TITLEID = OLD.ID)) THEN EXCEPTION DATA_LINKED;
  IF (EXISTS(SELECT FIRST 1 ID FROM USERLISTITEMS  WHERE TITLEID = OLD.ID)) THEN EXCEPTION DATA_LINKED;
END
^

/* Trigger: TITLE_INSERT */
CREATE OR ALTER TRIGGER TITLE_INSERT FOR TITLE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Title is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';
  IF (NEW.CONTENT_SIZE > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_TITLE_ID,1);
  IF (NEW.CONTENT_SIZE IS NULL) THEN NEW.CONTENT_SIZE = 0;
  IF (NEW.IMAGEFILE IS NULL) THEN NEW.IMAGEFILE = '';
END
^

/* Trigger: TITLE_UPDATE */
CREATE OR ALTER TRIGGER TITLE_UPDATE FOR TITLE
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'Title is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';
  IF (NEW.CONTENT_SIZE > 0 AND NEW.UOMID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Unit of Measure is required.';

  IF (NEW.CONTENT_SIZE IS NULL) THEN NEW.CONTENT_SIZE = 0;
  IF (NEW.IMAGEFILE IS NULL) THEN NEW.IMAGEFILE = '';
END
^

/* Trigger: USERLISTITEMS_INSERT */
CREATE OR ALTER TRIGGER USERLISTITEMS_INSERT FOR USERLISTITEMS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERLISTID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserListId is required.';
  IF (NEW.TITLEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'TitleId is required.';

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERLISTITEMS_ID,1);
  IF (NEW.SORTORDER IS NULL) THEN NEW.SORTORDER = 0;
  NEW.CREATEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: USERLISTITEMS_UPDATE */
CREATE OR ALTER TRIGGER USERLISTITEMS_UPDATE FOR USERLISTITEMS
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.USERLISTID IS DISTINCT FROM OLD.USERLISTID) THEN EXCEPTION GOT_HERE 'Cannot change UserList.';
  IF (NEW.TITLEID IS DISTINCT FROM OLD.TITLEID) THEN EXCEPTION GOT_HERE 'Cannot change Title.';    
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';

  IF (NEW.SORTORDER IS NULL) THEN NEW.SORTORDER = 0;
END
^

/* Trigger: USERLIST_DELETE */
CREATE OR ALTER TRIGGER USERLIST_DELETE FOR USERLIST
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  DELETE FROM USERLISTITEMS WHERE USERLISTID = OLD.ID;
END
^

/* Trigger: USERLIST_INSERT */
CREATE OR ALTER TRIGGER USERLIST_INSERT FOR USERLIST
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USERID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'UserId is required.';
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';
  IF (NEW.TYPEID IS NULL) THEN EXCEPTION FIELD_REQUIRED 'Media Type is required.';  

  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERLIST_ID,1);
  IF (NEW.LONGDESCRIPT IS NULL OR TRIM(NEW.LONGDESCRIPT) = '') THEN NEW.LONGDESCRIPT = '';
  IF (NEW.ISPRIVATE IS NULL) THEN NEW.ISPRIVATE = 0;
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: USERLIST_UPDATE */
CREATE OR ALTER TRIGGER USERLIST_UPDATE FOR USERLIST
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.USERID IS DISTINCT FROM OLD.USERID) THEN EXCEPTION GOT_HERE 'Cannot change UserId.';
  IF (NEW.TYPEID IS DISTINCT FROM OLD.TYPEID) THEN EXCEPTION GOT_HERE 'Cannot change Media Type.';
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';
  
  IF (NEW.DESCRIPT IS NULL OR TRIM(NEW.DESCRIPT) = '') THEN EXCEPTION FIELD_REQUIRED 'List Name is required.';

  IF (NEW.LONGDESCRIPT IS NULL OR TRIM(NEW.LONGDESCRIPT) = '') THEN NEW.LONGDESCRIPT = '';
  IF (NEW.ISPRIVATE IS NULL) THEN NEW.ISPRIVATE = 0;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: USERS_DELETE */
CREATE OR ALTER TRIGGER USERS_DELETE FOR USERS
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  DELETE FROM USERLIST    WHERE USERID = OLD.ID;  /* DELETES BOTH THE LIST AND LIST ITEMS */
  DELETE FROM ACTIVITY    WHERE USERID = OLD.ID;
  DELETE FROM DAILYLOG    WHERE USERID = OLD.ID;
END
^

/* Trigger: USERS_INSERT */
CREATE OR ALTER TRIGGER USERS_INSERT FOR USERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.FIRSTNAME IS NULL OR TRIM(NEW.FIRSTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'First Name is required.';
  IF (NEW.LASTNAME IS NULL OR TRIM(NEW.LASTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Last Name is required.';
  IF (NEW.USERNAME IS NULL OR TRIM(NEW.USERNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Username is required.';
  IF (NEW.PASSWORD_HASH IS NULL OR TRIM(NEW.PASSWORD_HASH) = '') THEN EXCEPTION FIELD_REQUIRED 'Password is required.';
  
  IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_USERS_ID,1);
  IF (NEW.EMAIL IS NULL OR TRIM(NEW.EMAIL) = '') THEN NEW.EMAIL = '';
  NEW.CREATEDON = CURRENT_TIMESTAMP;
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^

/* Trigger: USERS_UPDATE */
CREATE OR ALTER TRIGGER USERS_UPDATE FOR USERS
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  IF (NEW.FIRSTNAME IS NULL OR TRIM(NEW.FIRSTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'First Name is required.';
  IF (NEW.LASTNAME IS NULL OR TRIM(NEW.LASTNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Last Name is required.';
  IF (NEW.USERNAME IS NULL OR TRIM(NEW.USERNAME) = '') THEN EXCEPTION FIELD_REQUIRED 'Username is required.';
  IF (NEW.PASSWORD_HASH IS NULL OR TRIM(NEW.PASSWORD_HASH) = '') THEN EXCEPTION FIELD_REQUIRED 'Password is required.';
  IF (NEW.CREATEDON IS DISTINCT FROM OLD.CREATEDON) THEN EXCEPTION GOT_HERE 'Cannot change Created On Date.';
  
  IF (NEW.EMAIL IS NULL OR TRIM(NEW.EMAIL) = '') THEN NEW.EMAIL = '';
  NEW.MODIFIEDON = CURRENT_TIMESTAMP;
END
^
SET TERM ; ^

